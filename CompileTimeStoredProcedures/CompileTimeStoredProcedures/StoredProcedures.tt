<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System" #>

<#@ include file="Classes.tt"#>
<#@ output extension=".cs" #>

using System;

<#
	const string connectString = @"Data Source=localhost\sqlExpress;Initial Catalog=Scheduler;Integrated Security=SSPI;";

//		command.CommandText = "SELECT Name, Object_Id FROM sys.procedures WHERE Name NOT LIKE 'sp_%'";

		var tableValuedColumns = DbConnection.Invoke<IEnumerable<Table>>(connectString, HelperFunctions.GetTables); 
		var procedures = DbConnection.Invoke<IEnumerable<Procedure>>(connectString, HelperFunctions.GetProcedure);
		var createProcedureHeader = new Func<BaseObject,string> (baseObject=>String.Format("public partial class {0} : IDbQuery {{", baseObject.Name));
		var createTableValuedColumnHeader = new Func<BaseObject,string> (baseObject=>String.Format("public partial class {0} {{", baseObject.Name));
		var createResultColumnHeader = new Func<BaseObject,string> (baseObject=>String.Format("public partial class {0}_Result {{", baseObject.Name));
		var createProperty = new Func<Column, string>(c => {
			var columnDataType = Parameters.GetParameterType(c);
			 
			return string.Format("public {0} {1} {{get;set;}}", columnDataType, c.Name);});
#>


/*Start Table Valued Columns*/ 
<# 
	foreach(var t in tableValuedColumns)
	{
		#>

		namespace CompileTimeStoredProcedures.TableValuedParameter.<#=t.Schema#>
		{ 
			<#=createTableValuedColumnHeader(t)#>
				<#=String.Join(System.Environment.NewLine, 
					t.Columns.Select(x=>"public " + x.CSType + " " + x.Name + "{get;set;}"))#>
			}

		}

		<#
		}
#>
/*End Table Valued Columns*/
 



<#foreach(var procedure in procedures)
  {
      try 
      {	        
		
  #>
  namespace CompileTimeStoredProcedures.Query.<#=procedure.Schema#>
  { 

	  <#=createProcedureHeader(procedure)#>
	
	  	public <#=procedure.Name#> ( 
			<#=String.Join("," + System.Environment.NewLine, procedure.Columns.Select(x=> x.CSType + " " + x.CamelCase))#>
		)
		{
			<#=String.Join(System.Environment.NewLine, procedure.Columns.Select(x=> x.CSName + " = " + x.CamelCase + ";"))#>
		}
		
			public String Query {get{return "<#=procedure.Name#>";}}
			<#= String.Join(System.Environment.NewLine, procedure.Columns.Select (parm => "private readonly "  + parm.CSType + " _" + parm.CamelCase + ";")) #>
	
			<#=String.Join (System.Environment.NewLine, procedure.Columns.Select(parm => "[Parameter(\"" + parm.Name + "\")] \r\n public " + 
								parm.CSType + " " + parm.CSName + "{get {return _" + parm.CamelCase + ";}}"))#>
	
		}
	}

	namespace CompileTimeStoredProcedures.Result.<#=procedure.Schema#>
	{ 
		<#=createResultColumnHeader(procedure)#>
		<#
			foreach(var returnField in procedure.ReturnFields)
			{
				#><#=createProperty(returnField)#>
				
				<#
			}
  

		#>
		}
	}

<#
	        }
      catch ( Exception ex )
      {
		
          #>//{"Procedure": "<#=procedure.Name#>" Message: "<#=ex.Message#>"}<#
      }

	  
	  
	  }



#>
