
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System" #>

<#@ include file="Classes.tt"#>
<#@ output extension=".cs" #>


<#



	const string connectString = @"Data Source=localhost\sqlExpress;Initial Catalog=Scheduler;Integrated Security=SSPI;";

//		command.CommandText = "SELECT Name, Object_Id FROM sys.procedures WHERE Name NOT LIKE 'sp_%'";





	var getParms = new Func<int, Func<SqlCommand, IEnumerable<Column>>> ( 
			id => {return new Func<SqlCommand, IEnumerable<Column>>(x=>{
			x.CommandText = @"SELECT parameter_id, object_id, p.Name, 
				t.name as pType, t.max_length, has_default_value
				FROM sys.Parameters p JOIN sys.types t ON p.system_type_id = t.system_type_id
				and Object_id = " + id;
			
			var reader = x.ExecuteReader ();
			var l = new List<Column>();
			
			while(reader.Read())
			{
				l.Add(new Column{
						ObjectId = (int)reader[1],
					    Name = (string)reader[2],
					    Type = (string) reader[3],
					    MaxLength = (short)reader[4],
					    AllowsNull = (bool)reader[5]
				});
			}
   
		return l;
            }
					);
			});


		var getProc = new Func<SqlCommand, IEnumerable<Procedure>>(x=>{
		x.CommandText = @"SELECT p.Name, Object_Id, s.name FROM sys.procedures p
							JOIN sys.schemas s ON p.schema_id = s.schema_id
							WHERE p.Name NOT LIKE 'sp_%'";

		var reader = x.ExecuteReader ();
		var l = new List<Procedure>();
		
		while(reader.Read())
		{
			l.Add(new Procedure{
				 Name = (string)reader[0]
				,ObjectId = (int)reader[1]
				,Schema = (string)reader[2]
				,Columns = DbConnection.Invoke<IEnumerable<Column>>(connectString, getParms((int)reader[1]))
            });
        }

		return l;
    });


	var getColumnTypesForTable  = new Func<int, Func<SqlCommand, IEnumerable<Column>>>(
	id => {
		return new Func<SqlCommand, IEnumerable<Column>>(x=>{
			x.CommandText = @"SELECT object_id, c.name, t.name, c.is_nullable FROM sys.columns c
				join sys.types t ON c.system_type_id = t.system_type_id
				WHERE t.name <> 'sysname' AND object_id = " + id;
			
			var reader = x.ExecuteReader ();
			var l = new List<Column>();
			
			while(reader.Read())
			{
				l.Add(
					new Column
                {
					  Name  = (string) reader[1],
					  ObjectId = (int) reader[0],
					  Type = (string) reader[2],
					  AllowsNull = (bool) reader[3]
                });
			}
   
		return l;
   });
		});

	var getTables = new Func<SqlCommand, IEnumerable<Table>>(x=>{
			x.CommandText = @"SELECT type_table_object_id, Name FROM sys.table_types";
			
			var reader = x.ExecuteReader ();
			var l = new List<Table>();
			
			while(reader.Read())
			{
				l.Add(
					new Table
                {
					  Name  = (string)reader[1],
					  ObjectId = (int)reader[0]
					  ,Columns = DbConnection.Invoke<IEnumerable<Column>>(connectString, getColumnTypesForTable((int)reader[0]))
                });
			}
   
		return l;
   });

		var tableValuedColumns = DbConnection.Invoke<IEnumerable<Table>>(connectString, getTables); 
		var procedures = DbConnection.Invoke<IEnumerable<Procedure>>(connectString, getProc);
#>

namespace glbl
{

<#
	foreach(var t in tableValuedColumns)
	{
		#>
			<#=t.Header#>
				<#=String.Join(System.Environment.NewLine, 
					t.Columns.Select(x=>"public " + x.CSType + " " + x.Name + "{get;set;}"))#>
			<#=t.Footer#>

		<#


	}
#>




<#foreach(var p in procedures)
  {
	
  #>

  [Query("<#=p.FullName#>")]
  <#=p.Header#>

  	public <#=p.Name#> (
		<#=String.Join("," + System.Environment.NewLine, p.Columns.Select(x=> x.CSType + " " + x.CamelCase))#>
	)
	{
		<#=String.Join(System.Environment.NewLine, p.Columns.Select(x=> x.CSName + " = " + x.CamelCase + ";"))#>
	}
	

		<#= String.Join(System.Environment.NewLine, p.Columns.Select (parm => "private readonly "  + parm.CSType + " _" + parm.CamelCase + ";")) #>

		<#=String.Join (System.Environment.NewLine, p.Columns.Select(parm => "[QueryColumn(\"" + parm.Name + "\")] \r\n public " + 
							parm.CSType + " " + parm.CSName + "{get {return _" + parm.CamelCase + ";}}"))#>

	<#=p.Footer#>


}


<#}#>