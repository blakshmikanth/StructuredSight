<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System" #>

<#@ include file="Classes.tt"#>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using System.Linq;

<#
	const string connectString = @"Data Source=localhost\sqlExpress;Initial Catalog=AdventureWorks2012;Integrated Security=SSPI;";

//		command.CommandText = "SELECT Name, Object_Id FROM sys.procedures WHERE Name NOT LIKE 'sp_%'";

	#>//Starting Table Valued Columns<#
		var tableValuedColumns = DbConnection.Invoke<IEnumerable<Table>>(connectString, HelperFunctions.GetTables, "Table Valued Columns"); 

	#>//Starting Procedures<#
		var procedures = DbConnection.Invoke<IEnumerable<Procedure>>(connectString, HelperFunctions.GetProcedure, "Procedures");

	#>//Starting Header<#
		var createProcedureHeader = new Func<BaseObject,string> (baseObject=>String.Format("public partial class {0} : IDbQuery {{", baseObject.Name));

	#>//Starting Table Valued Column Header<#
		var createTableValuedColumnHeader = new Func<BaseObject,string> (baseObject=>String.Format("public partial class {0} {{", baseObject.Name));

	#>//Starting Results Column Header<#
		var createResultColumnHeader = new Func<BaseObject,string> (baseObject=>String.Format("public partial class {0}_Result {{", baseObject.Name));

	#>//Starting Property<#
		var createProperty = new Func<Column, string>(c => {
			var columnDataType = Parameters.GetParameterType(c);
			 
			return string.Format("public {0} {1} {{get;set;}}", columnDataType, c.Name);});
#> 

<#const string _codeNamspace = "CompileTimeStoredProcedures";#>
<#const string _tvpNamespace = _codeNamspace + ".TableValuedParameter";#>

/*Start Table Valued Columns*/ 
<# 
	foreach(var t in tableValuedColumns)
	{

		try
		{
		#>
		
			namespace <#=_tvpNamespace#>.<#=t.Schema#>
			{ 
				<#=createTableValuedColumnHeader(t)#>
					<#=String.Join(System.Environment.NewLine, 
						t.Columns.Select(x=>"public " + x.GetCSType(_tvpNamespace) + " " + x.Name + "{get;set;}"))#>
				} 

			}

		<#
		}catch (Exception ex){#><#=ex.Message#><#}
		}
#>
/*End Table Valued Columns*/
  



<#foreach(var procedure in procedures)
  {
      try 
      {	        
		
  #> 
  namespace <#=_codeNamspace#>.Query.<#=procedure.Schema#>
  { 
   
	  <#=createProcedureHeader(procedure)#>
	 
	  	public <#=procedure.Name#> ( 
			<#=String.Join("," + System.Environment.NewLine, procedure.Columns.Select(x=> x.GetCSType(_tvpNamespace) + " " + x.CamelCase))#>
		)
		{
			<#=String.Join(System.Environment.NewLine, procedure.Columns.Select(x=> "_" +  x.CamelCase + " = " + x.CamelCase + ";"))#>
		}  
		
			public String Query {get{return "<#=procedure.Name#>";}}
			<#= String.Join(System.Environment.NewLine, procedure.Columns.Select (parm => "private readonly "  + parm.GetCSType(_tvpNamespace) + " _" + parm.CamelCase + ";")) #>
	
			<#=String.Join (System.Environment.NewLine, procedure.Columns.Select(parm => "public " + 
								parm.GetCSType(_tvpNamespace) + " " + parm.CSName + "{get {return _" + parm.CamelCase + ";}}"))#>


			public IEnumerable<StoredProcedureParameterTypeAndValue> SqlParameters 
			{
				get 
				{
					
					<#if(procedure.Columns.Count() == 0){#>return new StoredProcedureParameterTypeAndValue[0];<#}#>

					<#foreach(var parameter in procedure.Columns)
					{
						if(parameter.AllowsNull)
                        {
							if(parameter.GetCSType(_tvpNamespace).Contains("?"))//using HasValue for nullables instead of checking for null
							{
								#>if(!_<#=parameter.CamelCase#>.HasValue)<#
                            }
							else{
								#>if(_<#=parameter.CamelCase#> != null)<#
                            }
							#>
							{
								yield return new StoredProcedureParameterTypeAndValue {Value = _<#=parameter.CamelCase#>, ParameterName = "<#=parameter.Name#>"};

							}<#
                        }
						else 
						{
							#>
								yield return new StoredProcedureParameterTypeAndValue {Value = _<#=parameter.CamelCase#>, ParameterName = "<#=parameter.Name#>"};
							<#		
                        }
                    }	#>							
					
				}

			}
	
		}
	}

	namespace <#=_codeNamspace#>.Result.<#=procedure.Schema#>
	{ 

		<#=createResultColumnHeader(procedure)#>

		public <#=procedure.Name#>_Result (System.Data.IDataReader reader)
		{
			<#	foreach(var returnField in procedure.ReturnFields) 
				{
					#>
						<#=returnField.CSName#> = (<#=Parameters.GetParameterType(returnField)#>)reader[<#=returnField.ObjectId#> -1] ;
						//the object is the ordinal position of the column.
						//-1 because of 0 based array in C#.


					<#
			
			
			
			
			
				}#>
		}



		<#
			foreach(var returnField in procedure.ReturnFields)
			{
				#><#=createProperty(returnField)#>
				
				<#
			} 
  

		#>
		}
	}

<#
	        }
      catch ( Exception ex )
      {
          #>//{"Procedure": "<#=procedure.Name#>" Message: "<#=ex.Message#>"}<#
      }

	  
	  
	  }



#>
