<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="C:\Program Files (x86)\Microsoft SQL Server\100\SDK\Assemblies\Microsoft.SqlServer.ConnectionInfo.dll" #>
<#@ assembly name="C:\Program Files (x86)\Microsoft SQL Server\100\SDK\Assemblies\Microsoft.SqlServer.Smo.dll"#>
<#@ assembly name="C:\Program Files (x86)\Microsoft SQL Server\100\SDK\Assemblies\Microsoft.SqlServer.SqlEnum.dll"#>
<#@ assembly name="C:\Program Files (x86)\Microsoft SQL Server\100\SDK\Assemblies\Microsoft.SqlServer.Management.Sdk.Sfc.dll" #> 
<#@ assembly name="System.Xml" #>
 
//C:\Program Files (x86)\Microsoft SQL Server\100\SDK\Assemblies\Microsoft.SqlServer.SmoEnum.dll

<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.SqlClient" #>



<#+ 

	public abstract class BaseObject {
		public string Name;
		public int ObjectId;
		public string Schema {get;set;}

    }



	public interface IDataType
	{
		string Type {get;set;}
		bool AllowsNull{get;set;}
    }


		public class Column : IDataType{
		public string Name;
		public string CSName {get {return Name.Replace("_", "").Replace("@", "");}}
		public int ParameterId;
		public int ObjectId;
		public string Type {get;set;}
		public short MaxLength;
		public bool AllowsNull {get;set;}
		public bool IsOutput {get;set;}
		
		public string CamelCase {get {return CSName[0].ToString().ToLower() + CSName.Substring(1);}}

		public string CSType {get {return Parameters.GetParameterType(this);}}

    }


	public class Table : BaseObject {

		public IEnumerable<Column> Columns;

    }


	public class Procedure : BaseObject
	{
		public string CSName {get {return Name.Replace("_", "");}}
		public string FullName {get {return Schema + "." + Name;}}

		public IEnumerable<Column> ReturnFields;
		public IEnumerable<Column> Columns;
    }
#>

<#+




	//public class Column : IDataType {
	//	public string Name;
	//	public int ObjectId;
	//	public string Type {get;set;}
	//	public bool AllowsNull {get;set;}
	//	public string CSType {get {return Parameters.GetParameterType(this);}}
    //}

	public static class Parameters {
		public static string GetParameterType(IDataType data)
		{
			switch (data.Type) 
			{
				case "bigint": {return "long" + (data.AllowsNull ? "?" : "");}

				case "varbinary":
				case "image": 
				case "binary": {return "byte[]";}

				case "bit": {return "bool" + (data.AllowsNull ? "?" : "");}

				case "date": 
				case "datetime": 
				case "smalldatetime":
				case "time":
				case "datetime2": {return "DateTime" + (data.AllowsNull ? "?" : "");}

				case "datetimeoffset": {return "";}
				case "decimal": {return "" + (data.AllowsNull ? "?" : "");}
				case "float": {return "" + (data.AllowsNull ? "?" : "");}
				case "geography": {return "";}
				case "geometry": {return "";}

				case "hierarchyid": 
				case "int": {return "int" + (data.AllowsNull ? "?" : "");}

				case "money": 
				case "numeric": 
				case "real": {return "float" + (data.AllowsNull ? "?" : "");}

				case "nchar":
				case "ntext": 
				case "smallint": {return "short"+ (data.AllowsNull ? "?" : "");}
				case "smallmoney": {return "money" + (data.AllowsNull ? "?" : "");}

				case "timestamp": {return "Binary";}
				case "tinyint": {return "byte"+ (data.AllowsNull ? "?" : "");}
				case "uniqueidentifier": {return "Guid"+ (data.AllowsNull ? "?" : "");}

				case "char": 
				case "nvarchar": 
				case "varchar": 
				case "sysname": 
				case "text": 
				case "xml": {return "string";}

				default : {return data.Type;}
                    }
        }

    }


	public static class DbConnection 
	{
		public static T Invoke <T>(string connectionString, Func<SqlCommand, T> cmd)
		{
			using (var client = new SqlConnection())
            {
				client.ConnectionString = connectionString;
				client.Open();

				var command = new SqlCommand();

				command.Connection = client;
				
				return cmd(command);
            }

        }


			
    }


	public static class HelperFunctions 
	{
		public static Func<SqlCommand, IEnumerable<Column>> GetParameters (int id, string procedureName) 
		{
			return new Func<SqlCommand, IEnumerable<Column>>(x=>{
				x.CommandText = @"SELECT parameter_id, object_id, p.Name, 
					t.name as pType, t.max_length, has_default_value, is_output
					FROM sys.Parameters p JOIN sys.types t ON p.system_type_id = t.system_type_id
					and Object_id = " + id;
				
				var reader = x.ExecuteReader ();
				var l = new List<Column>();
				
				using (var sqlConnection = new SqlConnection(x.Connection.ConnectionString))
                {
					//build a "serverConnection" with the information of the "sqlConnection"
					Microsoft.SqlServer.Management.Common.ServerConnection serverConnection = 
					new Microsoft.SqlServer.Management.Common.ServerConnection(sqlConnection);

					//The "serverConnection is used in the ctor of the Server.
					var server = new Microsoft.SqlServer.Management.Smo.Server(serverConnection);

					var database = server.Databases[sqlConnection.Database];
					var parms = database.StoredProcedures[procedureName].Parameters;
					foreach( Microsoft.SqlServer.Management.Smo.StoredProcedureParameter parm in parms)
					{
						l.Add(new Column{
							ObjectId = parm.ID, 
						    Name = parm.Name,
						    Type = parm.DataType.ToString(), //(string) reader[3],
						    MaxLength = 4,//(short)reader[4],
						    AllowsNull = !String.IsNullOrEmpty(parm.DefaultValue), //(bool)reader[5],
							IsOutput = parm.IsOutputParameter//(bool)reader[6]
					});

                    }

					return l;
                }


				//while(reader.Read())
				//{
				//	l.Add(new Column{
				//			ObjectId = (int)reader[1],
				//		    Name = (string)reader[2],
				//		    Type = (string) reader[3],
				//		    MaxLength = (short)reader[4],
				//		    AllowsNull = (bool)reader[5],
				//			IsOutput = (bool)reader[6]
				//	});
				//}
   
				return l;
            });
		}


		public static IEnumerable<Procedure> GetProcedure (SqlCommand command)
		{
			command.CommandText = @"SELECT p.Name, Object_Id, s.name FROM sys.procedures p
							JOIN sys.schemas s ON p.schema_id = s.schema_id
							WHERE p.Name NOT LIKE 'sp_%'";

			var reader = command.ExecuteReader ();
			var l = new List<Procedure>();
		
			while(reader.Read())
			{
				l.Add(new Procedure{
					 Name = (string)reader[0]
					,ObjectId = (int)reader[1]
					,Schema = (string)reader[2]
					,Columns = DbConnection.Invoke<IEnumerable<Column>>(command.Connection.ConnectionString, HelperFunctions.GetParameters((int)reader[1], (string)reader[0]))
					,ReturnFields = DbConnection.Invoke<IEnumerable<Column>>(command.Connection.ConnectionString, 
						HelperFunctions.GetReturnInformationForProcedure((int)reader[1]))
			    });
			}

			return l;
		}

		public static Func<SqlCommand, IEnumerable<Column>> GetReturnInformationForProcedure (int objectId)
		{
			string commandText = string.Format(@"SELECT column_ordinal, dm.name, dm.is_nullable, dm.system_type_id, t.name, dm.max_length --name, system_type_name
							FROM sys.dm_exec_describe_first_result_set_for_object
							(
							  {0}, 
							  NULL
							) dm
							JOIN sys.types t ON t.system_type_id = dm.system_type_id
							", objectId);

			return (command) => {
				command.CommandText = commandText; 

				var reader = command.ExecuteReader ();
				var l = new List<Column>();
				
				while(reader.Read())
				{
					l.Add(
						new Column
				    {
						  Name  = reader.IsDBNull(1) ? "" : (string) reader[1],
						  ObjectId = reader.IsDBNull(0)? 0 : (int) reader[0],
						  Type = reader.IsDBNull(4) ? ""  : (string) reader[4],
						  AllowsNull = reader.IsDBNull(2) ? false : (bool) reader[2]
				    });
				}
   
				return l;


            };

        }
		



	public static  Func<SqlCommand, IEnumerable<Column>> GetColumnTypesForTable  (int id )
	{
		return new Func<SqlCommand, IEnumerable<Column>>(x=>{
			x.CommandText = @"SELECT object_id, c.name, t.name, c.is_nullable FROM sys.columns c
				join sys.types t ON c.system_type_id = t.system_type_id
				WHERE t.name <> 'sysname' AND object_id = " + id;
			
			var reader = x.ExecuteReader ();
			var l = new List<Column>();
			
			while(reader.Read())
			{
				l.Add(
					new Column
                {
					  Name  = (string) reader[1],
					  ObjectId = (int) reader[0],
					  Type = (string) reader[2],
					  AllowsNull = (bool) reader[3]
                });
			}
   			
		return l;
   });
	}


		public static  IEnumerable<Table> GetTables (SqlCommand command)
		{
				command.CommandText = @"SELECT type_table_object_id, t.Name, s.Name FROM sys.table_types t 
					JOIN sys.schemas s ON t.schema_id = s.schema_id";
				
				var reader = command.ExecuteReader ();
				var l = new List<Table>();
				
				while(reader.Read())
				{
					l.Add(
							new Table
							{
								Name  = (string)reader[1],
								ObjectId = (int)reader[0]
								,Columns = DbConnection.Invoke<IEnumerable<Column>>
									(command.Connection.ConnectionString, HelperFunctions.GetColumnTypesForTable((int)reader[0]))
								,Schema = (string)reader[2]
							});
				}
	
				return l;
		}


    }




#>
