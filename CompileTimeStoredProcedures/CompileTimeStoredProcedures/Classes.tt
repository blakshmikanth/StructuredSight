<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.SqlClient" #>


<#+ 

	public abstract class BaseObject {
		public string Name;
		public int ObjectId;

		public string Header {get {return "public partial class " + Name + "\r\n{" ;}}
		public string Footer {get {return "}";}}
    }



	public interface IDataType
	{
		string Type {get;set;}
		bool AllowsNull{get;set;}
    }


		public class Column : IDataType{
		public string Name;
		public string CSName {get {return Name.Replace("_", "").Replace("@", "");}}
		public int ParameterId;
		public int ObjectId;
		public string Type {get;set;}
		public short MaxLength;
		public bool AllowsNull {get;set;}

		public string CamelCase {get {return CSName[0].ToString().ToLower() + CSName.Substring(1);}}

		public string CSType {get {return Parameters.GetParameterType(this);}}

    }


	public class Table : BaseObject {

		public IEnumerable<Column> Columns;
    }


	public class Procedure : BaseObject
	{
		public string CSName {get {return Name.Replace("_", "");}}
		public string Schema;
		public string FullName {get {return Schema + "." + Name;}}

		public IEnumerable<Column> Columns;
    }
#>

<#+




	//public class Column : IDataType {
	//	public string Name;
	//	public int ObjectId;
	//	public string Type {get;set;}
	//	public bool AllowsNull {get;set;}
	//	public string CSType {get {return Parameters.GetParameterType(this);}}
    //}

	public static class Parameters {
		public static string GetParameterType(IDataType data)
		{
					switch (data.Type) 
					{
						case "bigint": {return "long" + (data.AllowsNull ? "?" : "");}

						case "varbinary":
						case "image": 
						case "binary": {return "stream";}

						case "bit": {return "bool" + (data.AllowsNull ? "?" : "");}

						case "date": 
						case "datetime": 
						case "smalldatetime":
						case "time":
						case "datetime2": {return "DateTime" + (data.AllowsNull ? "?" : "");}

						case "datetimeoffset": {return "";}
						case "decimal": {return "" + (data.AllowsNull ? "?" : "");}
						case "float": {return "" + (data.AllowsNull ? "?" : "");}
						case "geography": {return "";}
						case "geometry": {return "";}

						case "hierarchyid": 
						case "int": {return "int" + (data.AllowsNull ? "?" : "");}

						case "money": 
						case "numeric": 
						case "real": {return "float" + (data.AllowsNull ? "?" : "");}

						case "nchar":
						case "ntext": 
						case "smallint": {return "short"+ (data.AllowsNull ? "?" : "");}
						case "smallmoney": {return "money" + (data.AllowsNull ? "?" : "");}

						case "timestamp": {return "Binary";}
						case "tinyint": {return "byte"+ (data.AllowsNull ? "?" : "");}
						case "uniqueidentifier": {return "Guid"+ (data.AllowsNull ? "?" : "");}

						case "char": 
						case "nvarchar": 
						case "varchar": 
						case "sysname": 
						case "text": 
						case "xml": {return "string";}

						default : {return data.Type;}
                    }
        }

    }


	public static class DbConnection 
	{
		public static T Invoke <T>(string connectionString, Func<SqlCommand, T> cmd)
		{
			using (var client = new SqlConnection())
            {
				client.ConnectionString = connectionString;
				client.Open();

				var command = new SqlCommand();

				command.Connection = client;
				
				return cmd(command);
            }

        }


			
    }


#>
