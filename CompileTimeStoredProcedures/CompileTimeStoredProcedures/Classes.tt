<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="C:\Program Files (x86)\Microsoft SQL Server\100\SDK\Assemblies\Microsoft.SqlServer.ConnectionInfo.dll" #>
<#@ assembly name="C:\Program Files (x86)\Microsoft SQL Server\100\SDK\Assemblies\Microsoft.SqlServer.Smo.dll"#>
<#@ assembly name="C:\Program Files (x86)\Microsoft SQL Server\100\SDK\Assemblies\Microsoft.SqlServer.SqlEnum.dll"#>
<#@ assembly name="C:\Program Files (x86)\Microsoft SQL Server\100\SDK\Assemblies\Microsoft.SqlServer.Management.Sdk.Sfc.dll" #> 
<#@ assembly name="System.Xml" #>
 
//C:\Program Files (x86)\Microsoft SQL Server\100\SDK\Assemblies\Microsoft.SqlServer.SmoEnum.dll

<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.SqlClient" #>



<#+ 

	public abstract class BaseObject {
		public string Name;
		public int ObjectId;
		public string Schema {get;set;}

    }



	public interface IDataType
	{
		string Type {get;set;}
		bool AllowsNull{get;set;}
    }


	public class Column : IDataType
	{
		public string Name;
		public string CSName {get {return Name.Replace("_", "").Replace("@", "");}}
		public int ParameterId;
		public int ObjectId;
		public string Type {get;set;}
		public short MaxLength;
		public bool AllowsNull {get;set;}
		public bool IsOutput {get;set;}
		public string Schema {get;set;}
		
		public string CamelCase {get {return CSName[0].ToString().ToLower() + CSName.Substring(1);}}

		public string GetCSType (string prefixNamespace) 
		{
				var type = Parameters.GetParameterType(this);
			    var additionalNamespace = string.IsNullOrWhiteSpace(prefixNamespace) ? "" : prefixNamespace + "." ;
				return (type == null) ? String.Format("IEnumerable<{0}{1}.{2}>", additionalNamespace, Schema, Type) : type;
		}

    }


	public class Table : BaseObject {

		public IEnumerable<Column> Columns;

    }


	public class Procedure : BaseObject
	{
		public string CSName {get {return Name.Replace("_", "");}}
		public string FullName {get {return Schema + "." + Name;}}

		public IEnumerable<Column> ReturnFields;
		public IEnumerable<Column> Columns;
    }
#>

<#+




	//public class Column : IDataType {
	//	public string Name;
	//	public int ObjectId;
	//	public string Type {get;set;}
	//	public bool AllowsNull {get;set;}
	//	public string CSType {get {return Parameters.GetParameterType(this);}}
    //}

	public static class Parameters {
		public static string GetParameterType(IDataType data)
		{
			switch (data.Type.ToLower()) 
			{
				case "bigint": {return "long" + (data.AllowsNull ? "?" : "");}

				case "rowversion":
				case "varbinary":
				case "image": 
				case "binary": {return "byte[]";}

				case "bit": {return "Boolean" + (data.AllowsNull ? "?" : "");}

				case "date": 
				case "datetime": 
				case "smalldatetime":
				case "datetime2": {return "DateTime" + (data.AllowsNull ? "?" : "");}

				case "datetimeoffset": {return "DateTimeOffset";}
				case "decimal": {return "Decimal" + (data.AllowsNull ? "?" : "");}
				case "float": {return "Double" + (data.AllowsNull ? "?" : "");}
				case "geography": {return "Object";} //no direct mapping //https://msdn.microsoft.com/en-us/library/cc716729%28v=vs.110%29.aspx
				case "geometry": {return "Object";} //no direct mapping

				case "hierarchyid": {return "string";}//no direct mapping string is the closest equivalent
				//https://msdn.microsoft.com/en-us/library/bb677290(v=sql.100).aspx
				case "int": {return "int" + (data.AllowsNull ? "?" : "");}

				case "money": 
				case "numeric": 
				case "real": {return "Single" + (data.AllowsNull ? "?" : "");}


				case "smallint": {return "Int16"+ (data.AllowsNull ? "?" : "");}
				case "smallmoney": {return "Decimal" + (data.AllowsNull ? "?" : "");}

				case "timestamp": {return "Binary";}
				case "tinyint": {return "byte"+ (data.AllowsNull ? "?" : "");}
				case "uniqueidentifier": {return "Guid"+ (data.AllowsNull ? "?" : "");}
				
				case "nchar":
				case "ntext": 
				case "char": 
				case "nvarchar": 
				case "varchar": 
				case "text": {return "string";}

				case "xml": {return "Xml";}

				case "sql_variant" : {return "Object";}
				case "time" : {return "TimeSpan";}

				default : {return null;}
			}
        }

    }


	public static class DbConnection 
	{
		public static T Invoke <T>(string connectionString, Func<SqlCommand, T> cmd, string invokeName = "Not Specified")
		{
			try
			{
				using (var client = new SqlConnection())
	            {
					client.ConnectionString = connectionString;
					client.Open();

					var command = new SqlCommand();
					
					command.Connection = client;
				
					return cmd(command);
				}
            }
			catch(Exception ex)
			{ 
					var tType = typeof(T);

					var enumerableType = (tType.IsGenericType) ? String.Join(", " , tType.GenericTypeArguments.Select(x=>x.Name)) : "";
			
					throw new Exception("Invoke Name: " + invokeName + " Invoking: " + tType.Name + " " + enumerableType, ex); 
            }

        }


			
    }
	
	public class ProcedureParameterInformation
	{
		public string Name {get;set;}
		public string Schema {get;set;}
		public string Type {get;set;}
		public int	ObjectId {get;set;}
    }

	public static class HelperFunctions 
	{
		public static Func<SqlCommand, IEnumerable<Column>> GetParameters (int id, string procedureName, string schema) 
		{
			
				return new Func<SqlCommand, IEnumerable<Column>>(x=>{
					try
					{
						x.CommandText = @"SELECT parameter_id, object_id, p.Name, 
							t.name as pType, t.max_length, has_default_value, is_output
							,s.name
							FROM 
								sys.Parameters p 
							JOIN sys.types t ON p.system_type_id = t.system_type_id
							JOIN sys.schemas s ON t.schema_id = s.schema_id
							WHERE
							s.Name = 'sys'
							AND	
							Object_id = " + id;
						
						var reader = x.ExecuteReader ();
						
						var parameterSchemaInformation = new List<ProcedureParameterInformation>();

						try
						{
							while(reader.Read())
							{
								parameterSchemaInformation.Add(new ProcedureParameterInformation{
									ObjectId = GetValue<int>(reader,0), 
									Schema = GetValue<string>(reader,7),
									Name = GetValue<string>(reader,2),
									Type = GetValue<string>(reader, 3) 
								});
							}

                        } catch(Exception ex) {throw new Exception("Reading Paremeters", ex);}

						var l = new List<Column>();
						
						using (var sqlConnection = new SqlConnection(x.Connection.ConnectionString))
						{
							try
							{

								//build a "serverConnection" with the information of the "sqlConnection"
								Microsoft.SqlServer.Management.Common.ServerConnection serverConnection = 
								new Microsoft.SqlServer.Management.Common.ServerConnection(sqlConnection);

								//The "serverConnection is used in the ctor of the Server.
								var server = new Microsoft.SqlServer.Management.Smo.Server(serverConnection);
								Microsoft.SqlServer.Management.Smo.Database database;
								Microsoft.SqlServer.Management.Smo.StoredProcedureParameterCollection parms = null;

								try
								{

									database = server.Databases[sqlConnection.Database];
									

									foreach (
										Microsoft.SqlServer.Management.Smo.StoredProcedure procedure in database.StoredProcedures)
                                    {
										if(procedure.Name.Equals(procedureName, StringComparison.OrdinalIgnoreCase)
											&&
											procedure.Schema.Equals(schema, StringComparison.OrdinalIgnoreCase))
                                        {
											parms = procedure.Parameters;
											break;
                                        }

                                    }

									//parms = (from procedure in database.StoredProcedures
									//			where procedure.Schema.Equals(schema, StringComparison.OrdinalIgnoreCase)
									//				&& procedure.Name.Equals(procedureName, StringComparison.OrdinalIgnoreCase)
									//		select procedure		
									//).First().Parameters;

										

                                }catch(Exception ex){throw new Exception("database and parms: " + schema + " " + procedureName, ex);}

								foreach( Microsoft.SqlServer.Management.Smo.StoredProcedureParameter parm in parms)
								{
									try
									{
										var currentParameter = parameterSchemaInformation.FirstOrDefault(pSc=>pSc.ObjectId == parm.ID);
										l.Add(new Column{
											ObjectId = parm.ID, 
										    Name = parm.Name,
										    Type = currentParameter.Type, 
												//We have to use this, because of custom types.  
												//With custom Types SMO only shows "UserDefinedValue" 
												//and not the underlying value.
										    MaxLength = 4,
										    AllowsNull = !String.IsNullOrEmpty(parm.DefaultValue),
											IsOutput = parm.IsOutputParameter
											,Schema = currentParameter.Schema
										});

								    }
									catch(Exception ex)
									{
										throw new Exception("parameter name: " + parm.Name, ex);
									}
								}

								return l;
                            }catch(Exception ex){throw new Exception("Using Statement", ex);}
					}
					}catch(Exception ex){throw new Exception ("id:" + id + " procedureName:" + procedureName , ex);}
            });
            
		}

		public static T GetValue<T>(System.Data.SqlClient.SqlDataReader reader, int position)
        {
			try {return (T) reader[position];}catch(Exception ex){ throw new Exception("position: " + position, ex); }
        }

		public static IEnumerable<Procedure> GetProcedure (SqlCommand command)
		{
			try{
			command.CommandText = @"SELECT p.Name, Object_Id, s.name FROM sys.procedures p
							JOIN sys.schemas s ON p.schema_id = s.schema_id
							WHERE p.Name NOT LIKE 'sp_%'";

			var reader = command.ExecuteReader ();
			var l = new List<Procedure>();
		
			while(reader.Read())
			{
				try
				{

					var schema = GetValue<string>(reader, 2);


					l.Add(new Procedure{
						 Name = GetValue<string>(reader, 0)
						,ObjectId = GetValue<int>(reader, 1)
						,Schema = schema
						,Columns = DbConnection.Invoke<IEnumerable<Column>>
							(command.Connection.ConnectionString, HelperFunctions.GetParameters((int)reader[1], (string)reader[0], schema), "Procedure Parameters")
						,ReturnFields = DbConnection.Invoke<IEnumerable<Column>>
							(command.Connection.ConnectionString, HelperFunctions.GetReturnInformationForProcedure((int)reader[1]), "Procedure Return Fields")
			    });
                } catch(Exception ex) {throw new Exception((string)reader[0], ex);}
			}

			return l;
            }catch(Exception ex) {throw;}
		}

		public static Func<SqlCommand, IEnumerable<Column>> GetReturnInformationForProcedure (int objectId)
		{
			try{
			string commandText = string.Format(@"SELECT column_ordinal, dm.name, dm.is_nullable, dm.system_type_id, t.name as TypeName, dm.max_length
							FROM sys.dm_exec_describe_first_result_set_for_object 
							(
							  {0}, 
							  NULL
							) dm
							JOIN sys.types t 
								ON t.system_type_id = dm.system_type_id 
								AND t.system_type_id = t.user_type_id
								-- did this to remove all the duplicates from custom types.
							WHERE t.name <> 'sysname' 
							ORDER BY dm.name"  , objectId);
							
				//remove the sysname from being a type name, because it adds redundant entry into the results when joining.

			return (command) => {
				command.CommandText = commandText; 

				var reader = command.ExecuteReader ();
				var l = new List<Column>();
				
				while(reader.Read())
				{
					l.Add(
						new Column
				    {
						  Name  = reader.IsDBNull(1) ? "" : (string) reader[1],
						  ObjectId = reader.IsDBNull(0)? 0 : (int) reader[0],
						  Type = reader.IsDBNull(4) ? ""  : (string) reader[4],
						  AllowsNull = reader.IsDBNull(2) ? false : (bool) reader[2]
				    });
				}
   
				return l;


            };
            }catch(Exception ex){throw new Exception("object id: " + objectId + " " + ex.Message);}
        }
		



	public static  Func<SqlCommand, IEnumerable<Column>> GetColumnTypesForTable  (int id )
	{
		return new Func<SqlCommand, IEnumerable<Column>>(x=>{
			x.CommandText = @"SELECT object_id, c.name, t.name, c.is_nullable FROM sys.columns c
				join sys.types t ON c.system_type_id = t.system_type_id
				WHERE t.name <> 'sysname' AND object_id = " + id;
			
			var reader = x.ExecuteReader ();
			var l = new List<Column>();
			
			while(reader.Read())
			{
				l.Add(
					new Column
                {
					  Name  = (string) reader[1],
					  ObjectId = (int) reader[0],
					  Type = (string) reader[2],
					  AllowsNull = (bool) reader[3]
                });
			}
   			
		return l;
   });
	}


		public static  IEnumerable<Table> GetTables (SqlCommand command)
		{
				command.CommandText = @"SELECT type_table_object_id, t.Name, s.Name FROM sys.table_types t 
					JOIN sys.schemas s ON t.schema_id = s.schema_id";
				
				var reader = command.ExecuteReader ();
				var l = new List<Table>();
				
				while(reader.Read())
				{
					l.Add(
							new Table
							{
								Name  = (string)reader[1],
								ObjectId = (int)reader[0]
								,Columns = DbConnection.Invoke<IEnumerable<Column>>
									(		command.Connection.ConnectionString, 
											HelperFunctions.GetColumnTypesForTable((int)reader[0]),
											"Get Tables"
											
									)
								,Schema = (string)reader[2]
							});
				}
	
				return l;
		}


    }




#>
