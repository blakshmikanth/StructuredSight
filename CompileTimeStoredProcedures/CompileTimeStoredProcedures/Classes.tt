<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.SqlClient" #>


<#+ 
	public class Procedure 
	{
		public string Name;
		public long ObjectId;
		public string CSName {get {return Name.Replace("_", "");}}
    }
#>

<#+
	public class Parameter {
		public string Name;
		public string CSName {get {return Name.Replace("_", "").Replace("@", "");}}
		public int ParameterId;
		public int ObjectId;
		public string ParameterType;
		public short MaxLength;
		public bool HasDefaultValue;

		public string CSType {get {return Parameters.GetParameterType(ParameterType);}}

    }

	public class Column {
		public string Name;
		public int ObjectId;
		public string ColumnType;
		public string CSType {get {return Parameters.GetParameterType(ColumnType);}}

    }

	public class Table {
		public string Name;
		public int ObjectId;

		public IEnumerable<Column> Columns;
    }


	public static class Parameters {
		public static string GetParameterType(string sqlType)
		{
					switch (sqlType) 
					{
						case "bigint": {return "long";}
						case "binary": {return "stream";}
						case "bit": {return "bool";}
						case "char": {return "string";}
						case "date": 
						case "datetime": 
						case "datetime2": {return "DateTime";}
						case "datetimeoffset": {return "";}
						case "decimal": {return "";}
						case "float": {return "";}
						case "geography": {return "";}
						case "geometry": {return "";}
						case "hierarchyid": {return "";}
						case "image": {return "stream";}
						case "int": {return "int";}
						case "money": {return "float";}
						case "nchar": {return "string";}
						case "ntext": {return "string";}
						case "numeric": {return "float";}
						case "nvarchar": {return "string";}
						case "real": {return "float";}
						case "smalldatetime": {return "DateTime";}
						case "smallint": {return "short";}
						case "smallmoney": {return "money";}
						case "sysname": {return "string";}
						case "text": {return "string";}
						case "time": {return "DateTime";}
						case "timestamp": {return "Binary";}
						case "tinyint": {return "byte";}
						case "uniqueidentifier": {return "Guid";}
						case "varbinary": {return "stream";}
						case "varchar": {return "string";}
						case "xml": {return "string";}
						default : {return sqlType;}
                    }
        }

    }


	public static class DbConnection 
	{
		public static T Invoke <T>(string connectionString, Func<SqlCommand, T> cmd)
		{
			using (var client = new SqlConnection())
            {
				client.ConnectionString = connectionString;
				client.Open();

				var command = new SqlCommand();

				command.Connection = client;
				
				return cmd(command);
            }

        }


			
    }


#>
